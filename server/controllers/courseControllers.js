// server/controllers/courseController.js
import Course from "../models/Course.js";
// import { generateCourseContentWithAI } from '../services/aiService.js'; // Will create this later

// Placeholder for generateCourse logic
const generateCourse = async (req, res) => {
  const { topic } = req.body;
  const userId = req.userId; // User ID attached by Auth0 middleware

  if (!userId) {
    return res.status(401).json({ message: "User not authenticated." });
  }

  if (!topic) {
    return res
      .status(400)
      .json({ message: "Topic is required to generate a course." });
  }

  try {
    // TODO: In Milestone 5, call the AI service here
    // const generatedData = await generateCourseContentWithAI(topic);

    // For now, return a dummy course structure to test Auth and DB persistence
    const dummyCourse = {
      title: `Dummy Course on ${topic}`,
      description: `This is a placeholder course about ${topic} generated by the system.`,
      modules: [
        {
          moduleTitle: "Dummy Module 1: Introduction",
          lessons: [
            {
              lessonTitle: "Dummy Lesson 1.1: What is " + topic,
              objectives: ["Understand the basics"],
              keyTopics: ["Definition", "Importance"],
              resources: ["http://example.com/dummy-resource"],
              quiz: {
                questions: [
                  {
                    questionText: `What is the primary concept of ${topic}?`,
                    options: ["Option 1", "Option 2", "Option 3", "Option 4"],
                    correctAnswer: "Option 2",
                    explanation: "Because it's a dummy.",
                  },
                ],
              },
            },
          ],
        },
      ],
      prompt: topic,
      userId: userId, // Associate the course with the logged-in user
    };

    const newCourse = new Course(dummyCourse);
    await newCourse.save();

    res.status(201).json(newCourse);
  } catch (error) {
    console.error("Error generating course:", error);
    res
      .status(500)
      .json({ message: "Error generating course", error: error.message });
  }
};

const getCourseById = async (req, res) => {
  try {
    const course = await Course.findById(req.params.id);
    if (!course) {
      return res.status(404).json({ message: "Course not found" });
    }

    // Optional: Only allow owner to view
    // if (course.userId && course.userId !== req.userId) {
    //   return res.status(403).json({ message: 'Access denied' });
    // }

    res.status(200).json(course);
  } catch (error) {
    console.error("Error fetching course:", error);
    res
      .status(500)
      .json({ message: "Error fetching course", error: error.message });
  }
};

export { generateCourse, getCourseById };
